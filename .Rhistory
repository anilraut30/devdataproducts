table(restData$nearMe)
restData$nearMe
table(restData$nearMe)
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong)
table(restData$zipWrong,restData$zipCode < 0)
restData$zipGroups = cut(restData$zipCode,breaks=quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups,restData$zipCode)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf
restData$zcf[1:10]
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesno
class(yesno)
?sample
yesno <- sample(c("yes","no"),size=10)
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesno <- sample(c("y","n"),size=10,replace=TRUE)
yesno
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesno
yesnofac = factor(yesno,levels=c("yes","no"))
yesnofac
yesno
x <- 1:12
sample(x)
as.numeric(yesnofact)
as.numeric(yesnofac)
relevel(yesnofac,ref="yes")
as.numeric(yesnofac)
restData$zipGroups
table(restData$zipGroups)
library(Hmisc); library(plyr)
restData2 = mutate(restData,zipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
library(reshape2)
head(mtcars)
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library("dplyr")
library(dplyr)
install.packages("dplyr",repos="C:\Users\Anil\AppData\Local\Temp\RtmpqgJDKK\downloaded_packages\dplyr_0.4.1.zip")
install.packages("dplyr",repos="C:\\Users\\Anil\\AppData\\Local\\Temp\\RtmpqgJDKK\\downloaded_packages\\dplyr_0.4.1.zip")
install.packages("dplyr")
library(dplyr)
options(width = 105)
chicago <- readRDS("chicago.rds")
chicago <- readRDS("chicago.rds")
chicago <- readRDS("chicago.rds")
chicago <- readRDS("chicago.rds")
library(dplyr)
chicago <- readRDS("chicago.rds")
install.packages("dplyr")
library(dplyr)
chicago <- readRDS("chicago.rds")
install.packages("C:/Users/Anil/AppData/Local/Temp/RtmpQr7sTG/downloaded_packages/dplyr_0.4.1.zip", repos = NULL)
library(dplyr)
chicago <- readRDS("chicago.rds")
yourPath = "D:\\Data Science\\Coursera\\Getting and Cleaning Data\\getdata_projectfiles_UCI HAR Dataset\\UCI HAR Dataset"
# load x and y for Test and Train
xTrain = read.table(paste(yourPath, "train/X_train.txt", sep=""))
yourPath = "D:\\Data Science\\Coursera\\Getting and Cleaning Data\\getdata_projectfiles_UCI HAR Dataset\\UCI HAR Dataset"
# load x and y for Test and Train
xTrain = read.table(paste(yourPath, "\train\X_train.txt", sep=""))
yourPath = "D:\\Data Science\\Coursera\\Getting and Cleaning Data\\getdata_projectfiles_UCI HAR Dataset\\UCI HAR Dataset"
# load x and y for Test and Train
xTrain = read.table(paste(yourPath, "\\train\\X_train.txt", sep=""))
yTrain = read.table(paste(yourPath, "\\train\\y_train.txt", sep=""))
xTest = read.table(paste(yourPath, "\\test\\X_test.txt", sep=""))
yTest = read.table(paste(yourPath, "\\test\\y_test.txt", sep=""))
varNames = read.table(paste(yourPath, "features.txt", sep="")); varNames = varNames[,2];
activityLabels = read.table(paste(yourPath, "activity_labels.txt", sep=""));
varNames = read.table(paste(yourPath, "\\features.txt", sep="")); varNames = varNames[,2];
activityLabels = read.table(paste(yourPath, "\\activity_labels.txt", sep=""));
varNames
names(xTrain) <- varNames
names(xTest) <- varNames
xMatrix = rbind(xTest,xTrain) # from 1 to 7532 they were used for training, from 7533 to 10299 they were used for testing
yVector = rbind(yTest,yTrain)
whichMeans = grep("[m]ean", varNames)
xMatrixReduced = xMatrix[,whichMeans]
write.csv(xMatrixReduced,file=paste(yourPath, "\\xMatrixReduced.csv", sep=""))
yVectorLabels=vector(mode="character", length=length(yVector))
for(a in 1:6){
inds = which(yVector==a)
yVectorLabels[inds] <- as.character(activityLabels[a,2])
}
subjectTrain = read.table(paste(yourPath, "\\train\\subject_train.txt", sep=""))
subjectTest = read.table(paste(yourPath, "\\test\\subject_test.txt", sep=""))
subjectify = function(x){return(paste("Subject", as.character(x), sep=""))}
subjectNamesTest= sapply(subjectTest, FUN=subjectify)
subjectNamesTrain= sapply(subjectTrain, FUN=subjectify)
subjectNamesVector = rbind(subjectNamesTrain, subjectNamesTest)
newData = matrix(ncol=length(names(xMatrixReduced)), nrow=length(unique(subjectNamesVector)))
rownames(newData) = unique(subjectNamesVector);
colnames(newData) = names(xMatrixReduced);
for(s in unique(subjectNamesVector)){
w = which(subjectNamesVector == s)
cm = colMeans(xMatrixReduced[w,])
newData[s,] = cm
}
write.csv(newData,file=paste(yourPath, "newData.csv", sep=""))
yourPath
write.csv(newData,file=paste(yourPath, "\\newData.csv", sep=""))
write.table(newData,file=paste(yourPath, "\\newData.txt", sep=""),row.names = FALSE)
ls()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
Sys.setlocale("LC_MESSAGES", 'en_US.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
swirl()
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
month(this_day)
day(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours = 8,minutes = 34,seconds = 55)
this_moment
this_moment <- update(this_moment,hours = 16,minutes = 05,seconds = 55)
this_moment
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- nyc + hours(17) + minutes(34)
depart <- update(depart,hours = 17,minutes = 34)
depart
depart <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
depart
arrive <- depart + hours(15) + minutes(50)
depart <- depart - hours(15) - minutes(50)
depart
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
info()
skip()
arrive <- depart + hours(15) + minutes(50)
skip()
arrive <- depart + hours(15) + minutes(50)
arrive
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
depart <- ymd("2015-03-03 17:34:41",tz="EST")
nyc <- now(tzone="America/New_York")
depart <- nyc + days(2)
depart <- update(depart,hours = 17,minutes = 34)
arrive <- depart + hours(15) + minutes(50)
info()
pay()
play()
nyc <- now(tzone="America/New_York")
depart <- nyc + days(2)
depart <- update(depart,hours = 17,minutes = 34)
depart
nxt()
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15)
arrive <- depart + minutes(50)
arrive
arrive <- depart + hours(15) + minutes(50)
info()
main()
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive,tzone="Asia/Hong_Kong")
with_tz(arrive,"Asia/Hong_Kong")
info()
main()
with_tz(arrive,"Asia/Hong_Kong")
with_tz(arrive,tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time = mdy("June 17,2008",tz="Singapore")
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day,label=TRUE)
wday(this_day)
wday(this_day,label=TRUE)
this_moment < now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours = 17,minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with(arrive,tzone="Asia/Hong_Kong")
arrive <- with(arrive,"Asia/Hong_Kong")
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
?read.csv
mydf <- read.csv(path2csv,stringAsFactors= FALSE)
mydf <- read.csv(path2csv,stringsAsFactors= FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
seelct(cran,-X:size)
select(cran,-X:size)
seelct(cran,-(X:size))
select(cran,-(X:size))
-5:20
select(cran,4:10)
select(cran,-(5:20))
cran
select(cran,-(5:20))
select(cran,(5:20))
select(cran,-(5:20))
info()
skip()
-(5:20)
select(cran,-(X:size))
filter(cran,package == "swirl")
filter(cran,r_version == "3.1.1",country == "US")
?Comparison
filter(cran,r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 AND r_os == "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500,r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !os.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_ip)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size / 2^20)
mutate(cran3,size_mb = size / 2^20,size_gb = size_mb / 2^20)
mutate(cran3,size_mb = size / 2^20,size_gb = size_mb / 2^10)
mutate(cran3,correct_size = size -10)
mutate(cran3,correct_size = size +1000)
summarize(cran, avg_bytes = mean(size))
libraary(swirl)
library(swirl)
swirl()
library(dplyr)
head(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
submit()
submit()
submit()
submit()
submit()
info()
skip()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts <- select(pack_sum,count > 679)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
test
round(test$p.value,2)
poisson.test?
///
?poisson.test
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x * w
mean(z)
0.2575 * 0.2575
weighted.mean(x, w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit<- lm( y ~ x - 1 )
summary(fit) # 0.8263
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit) # -5.3445
corOfYandX <- 0.5
sdYoverX <- 2
beta1 <- corOfYandX*sdYoverX
beta1 # 1
corOfYandX <- 0.4
quiz1 <- 1.5
quiz2 <- quiz1*corOfYandX*1 + 0
quiz2 # 0.6
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
y <- (x[1]-mean)/sd
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
summary(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
s <- sd(x)
s
0.167998 * 0.167998
# Problem 9.
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x) # 0.573
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
f <- lm(y ~ x)
summary(f) # p-value: 0.05296
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x
)
predict(fit,data.frame(x=mean(x)), interval="confidence")
main="Boxplot of MPG vs. Transmission")
In the present project, we have attempted to answer the question of whether manual or automatic transmission is a better choice for efficient fuel usage in cars. The data used for this analysis come from the 1974 Motor Trend US Magazine. We have performed hypothesis testing and fitted linear models to establish and quantify the relationship between MPG and type of transmission. It turned out that the weight of the car was a significant confounder in our analysis, and the choice of manual or automatic depends on it.
```{r,echo=FALSE}
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child ~ parent,galton)
abline(regrline,lwd=3,col='red')
abline(regrline,lwd=6,col='red')
abline(regrline,lwd=3,col='red')
summary(regrline)
fit <- lm
swirl()
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist,attenu)
summary(efit)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor,gpa_nor)
l_nor <- lm(gch_nor~gpa_nor)
fit <- lm(child,parent,galton)
fit <- lm(child~parent,galton)
sqrt(sum(fit$residuals^2)/n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit$sigma)
summary(fit)$sigma
sqrt(deviance(fit)/(n-1))
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Constant - 1, trees)
fit <- lm(Volume ~ . - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
deployapp()
deployApp()
devtools::install_github('rstudio/shinyapps')
deployApp()
shinyapps::setAccountInfo(name='anilraut', token='034A497D87D6CC77BBA7E45BEE2CF0C2', secret='cMRA2YL+z7PVBdC8Et+MckV7fN6QQHakeL5JLdOx')
library(shinyapps)
setwd('D:\\Data Science\\Coursera\\devdataproducts')
getwd()
library(shiny)
install.packages("shiny")
library(shiny)
runApp()
install.packages('Rcpp')
install.packages("Rcpp")
runApp()
library(shiny)
runApp()
library(shinyapps)
deployApp()
install.packages("devtools")
library(shinyapps)
deployApp()
getwd()
update.packages("Rtools")
library(shinyapps)
deployApp()
deployApp()
